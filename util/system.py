import os

MAX_FILE_SIZE_BYTES = 90*(2**20)
CHUNK_EXT = "_(part_%i_of_%i).chunk"
class FileTooSmall(Exception): pass

# Disassemble a file larger than "max_size" into chunks of size
# "max_size" having extension names generated by "chunk_ext".
# 
# ARGUMENTS:
#   file_path -- A string representing an absolute or relative path to
#                a file.
# 
# OPTIONAL:
#   max_size_bytes -- An integer representing the maximum number of
#                     bytes that a file chunk can contain.
#   chunk_ext      -- A string that contains two '%i' for formatting
#                     chunk extensions in the form "part %i of %i".
#   verbose        -- Prints out status information when set to True.
def disassemble(file_path, max_size_bytes=MAX_FILE_SIZE_BYTES,
                chunk_ext=CHUNK_EXT, verbose=True):
    size = os.path.getsize(file_path)
    chunks = int(size / max_size_bytes + 0.5)
    if (chunks <= 1): raise(FileTooSmall("The provided file is smaller than 'max_size'."))
    if verbose:
        print()
        print("File path:  ", file_path)
        print("File size:  ", size)
        print("File chunks:", chunks)
    with open(file_path, "rb") as f:
        for c in range(1,chunks+1):
            # Open the output file (with appropriate name) and read
            # out a chunk to that output file.
            with open(file_path+chunk_ext%(c,chunks), "wb") as out:
                if verbose:
                    print(" writing chunk %i of %i in '%s'..."%(c,chunks,out.name))
                out.write(f.read(max_size_bytes))
            
