READ ME FILE FOR VTDELAUNAY LIBRARY
AUTHOR: TYLER H. CHANG
INSTITUTION: VIRGINIA POLYTECHNIC INSTITUTE AND STATE UNIVERSITY
LAST UPDATE: SEPTEMBER, 2017

This is the read-me file for the VTdelaunay Delaunay Triangulation
Library.

Contents:

---	VTdelaunay.f90 : Main VTDelaunay function. Use DelaunayP()
	subroutine.

---	VTgeometry.f90 : d-dimensional geometry subroutines. Not
	necessary for proper function of VTdelaunay.

---	Project.f90 : Subroutine to project a point (p) outside
	the convex hull onto the convex hull. Uses an inequality
	constrained LS problem solver WNNLS proposed in ACM TOMS
	Algorithm #587.

---	TOMS587.f : ACM TOMS Algorithm #587 source code written
	in Fortran 66 with non-relevant sections commented out.

---	real_precision.f90 : Fortran 90 module for ~64 bit
	arithmetic on all known machines.

---	main.f90 : A command line interface for testing
	VTdelaunay.f90.

---	Makefile : A simple makefile for this project.

---	ErrorCodes.txt : Description of error codes returned by
	DelaunayP() subroutine.

---	sample.dat : A sample data file for a 4d problem with
	43 points.

---	README : This file.

Description:

VTdelaunay computes partial Delaunay Triangulations in arbitrary
dimension d, and scales well for problems up to d ~ 100.

To compute a partial triangulation, users must have:
(1) A set of points in d-space (pts);
(2) The number of points in the space (n);
(3) The coordinates of a point (p) in d-space to interpolate at 
	using the Delaunay triangulation of (pts).

This program returns the d+1 vertices which define a legal
Delaunay simplex containing (p), and the d+1 affine weights for
interpolating (p) from those d+1 vertices.

The algorithm is based on the gift-wrapping approach. By
dropping the least-weighted vertex at every step, a series of
legal Delaunay simplices are constructed, with each subsequent
simplex moving closer to the desired simplex s*, which contains
(p).

Usage:

Use 'make' to build with all dependencies. -llapack -lblas must be
set up to link with LAPACK and BLAS libraries, or Makefile should
be modified. By default, gfortran compiler is used.

Use DelaunayP() subroutine in VTdelaunay.f90 for computing Delaunay
Triangulation in arbitrary dimension d.

SUBROUTINE DelaunayP(d, n, pts, p, simp, weights, err, &
        eps_opt, rnorm_opt, budget_opt, extrap_opt)

INTEGER (IN) d : Dimension of space.                                  
INTEGER (IN) n : Number of points in set.                             
DOUBLE (IN) pts(d,n) : Set of n points in d-space.                    
DOUBLE (IN) p(d) : A single point in d-space to interpolate using     
      the delaunay triangulation.                        
INTEGER (OUT) simp(d+1) : The indices of the points which make up the 
      vertices of the simplex containing p.       
DOUBLE (OUT) weights(d+1) : The weights for the vertices of simp for  
      interpolating at p.                       
INTEGER (OUT) err : Error flag:
      SUCCESSFUL INTERPOLATION = 0
      SUCCESSFUL EXTRAPOLATION = 1
      See other codes in ErrorCodes.txt file.
OPTIONAL, DOUBLE (IN) eps_opt : A small number defining the tolerance for
      accepting "nearly" containing simplices. 0 < eps <<< scale of data.
      Default value: eps = 0.1 * DIAMETER(PTS) * SQRT(EPSILON(DOUBLE)).
OPTIONAL, DOUBLE (OUT) rnorm_opt : The 2-norm of the residual vector when
      projecting p onto the convex hull of pts. This value is always
      calculated when extrapolation is turned on, but only returned when
      this value is present.
OPTIONAL, INTEGER (IN) budget_opt : The maximum number of simplices that
      the user is willing to construct when searching for the simplex
      containing p. In practice, this should occur in no more than 20~30
      iterations, with a typical case of 1~10. The default value for
      budget is: budget = 1000. If failure to converge in this many
      iterations, it is most likely that eps is too small for the scale
      of this problem.
OPTIONAL, LOGICAL (IN) extrap_opt : If extrap_opt = .FALSE., then no
      extrapolation will be done when p is outside the convex hull and
      an error flag will be returned. By default, extrap = .TRUE.
