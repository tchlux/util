MODULE FIT_BOX_MOD_WRAPPER
  USE ISO_C_BINDING, ONLY: C_LONG, C_DOUBLE
  USE REAL_PRECISION
  USE FIT_BOX
  IMPLICIT NONE

CONTAINS


SUBROUTINE c_COMPUTE_BOXES( X_DATA_0, X_DATA_1, X_DATA, RESPONSE, BOXE&
     &S_0, BOXES_1, BOXES, WIDTHS, WEIGHTS ) BIND(c)
    INTEGER(KIND=C_LONG), INTENT(IN) :: X_DATA_0
    INTEGER(KIND=C_LONG), INTENT(IN) :: X_DATA_1
    REAL(KIND=C_DOUBLE), INTENT(IN), DIMENSION(X_DATA_0,X_DATA_1) :: X&
         &_DATA
    REAL(KIND=C_DOUBLE), INTENT(IN), DIMENSION(UBOUND(X_DATA,2)) :: RE&
         &SPONSE
    INTEGER(KIND=C_LONG), INTENT(IN) :: BOXES_0
    INTEGER(KIND=C_LONG), INTENT(IN) :: BOXES_1
    REAL(KIND=C_DOUBLE), INTENT(OUT), DIMENSION(BOXES_0,BOXES_1) :: BO&
         &XES
    REAL(KIND=C_DOUBLE), INTENT(OUT), DIMENSION(UBOUND(BOXES,2)) :: WI&
         &DTHS
    REAL(KIND=C_DOUBLE), INTENT(OUT), DIMENSION(UBOUND(BOXES,2)) :: WE&
         &IGHTS
    
    CALL COMPUTE_BOXES(X_DATA, RESPONSE, BOXES, WIDTHS, WEIGHTS)
    
  END SUBROUTINE c_COMPUTE_BOXES


SUBROUTINE c_MAX_BOXES( PTS_0, PTS_1, PTS, BOX_WIDTHS ) BIND(c)
    INTEGER(KIND=C_LONG), INTENT(IN) :: PTS_0
    INTEGER(KIND=C_LONG), INTENT(IN) :: PTS_1
    REAL(KIND=C_DOUBLE), INTENT(IN), DIMENSION(PTS_0,PTS_1) :: PTS
    REAL(KIND=C_DOUBLE), INTENT(OUT), DIMENSION(2*UBOUND(PTS,1),UBOUND&
         &(PTS,2)) :: BOX_WIDTHS
    
    CALL MAX_BOXES(PTS, BOX_WIDTHS)
    
  END SUBROUTINE c_MAX_BOXES


SUBROUTINE c_EVAL_BOX_COEFS( BOXES_0, BOXES_1, BOXES, WIDTHS_0, WIDTHS&
     &, X_POINTS_0, X_POINTS_1, X_POINTS, BOX_VALS ) BIND(c)
    INTEGER(KIND=C_LONG), INTENT(IN) :: BOXES_0
    INTEGER(KIND=C_LONG), INTENT(IN) :: BOXES_1
    REAL(KIND=C_DOUBLE), INTENT(IN), DIMENSION(BOXES_0,BOXES_1) :: BOX&
         &ES
    INTEGER(KIND=C_LONG), INTENT(IN) :: WIDTHS_0
    REAL(KIND=C_DOUBLE), INTENT(IN), DIMENSION(WIDTHS_0) :: WIDTHS
    INTEGER(KIND=C_LONG), INTENT(IN) :: X_POINTS_0
    INTEGER(KIND=C_LONG), INTENT(IN) :: X_POINTS_1
    REAL(KIND=C_DOUBLE), INTENT(IN), DIMENSION(X_POINTS_0,X_POINTS_1) &
         &:: X_POINTS
    REAL(KIND=C_DOUBLE), INTENT(OUT), DIMENSION(UBOUND(BOXES,2),UBOUND&
         &(X_POINTS,2)) :: BOX_VALS
    
    CALL EVAL_BOX_COEFS(BOXES, WIDTHS, X_POINTS, BOX_VALS)
    
  END SUBROUTINE c_EVAL_BOX_COEFS


SUBROUTINE c_EVAL_BOXES( BOXES_0, BOXES_1, BOXES, WIDTHS_0, WIDTHS, WE&
     &IGHTS_0, WEIGHTS, X_POINTS_0, X_POINTS_1, X_POINTS, RESPONSE ) B&
     &IND(c)
    INTEGER(KIND=C_LONG), INTENT(IN) :: BOXES_0
    INTEGER(KIND=C_LONG), INTENT(IN) :: BOXES_1
    REAL(KIND=C_DOUBLE), INTENT(IN), DIMENSION(BOXES_0,BOXES_1) :: BOX&
         &ES
    INTEGER(KIND=C_LONG), INTENT(IN) :: WIDTHS_0
    REAL(KIND=C_DOUBLE), INTENT(IN), DIMENSION(WIDTHS_0) :: WIDTHS
    INTEGER(KIND=C_LONG), INTENT(IN) :: WEIGHTS_0
    REAL(KIND=C_DOUBLE), INTENT(IN), DIMENSION(WEIGHTS_0) :: WEIGHTS
    INTEGER(KIND=C_LONG), INTENT(IN) :: X_POINTS_0
    INTEGER(KIND=C_LONG), INTENT(IN) :: X_POINTS_1
    REAL(KIND=C_DOUBLE), INTENT(IN), DIMENSION(X_POINTS_0,X_POINTS_1) &
         &:: X_POINTS
    REAL(KIND=C_DOUBLE), INTENT(OUT), DIMENSION(UBOUND(X_POINTS,2)) ::&
         & RESPONSE
    
    CALL EVAL_BOXES(BOXES, WIDTHS, WEIGHTS, X_POINTS, RESPONSE)
    
  END SUBROUTINE c_EVAL_BOXES


SUBROUTINE c_QSORTC( A_0, A, IDX ) BIND(c)
    INTEGER(KIND=C_LONG), INTENT(IN) :: A_0
    REAL(KIND=C_DOUBLE), INTENT(INOUT), DIMENSION(A_0) :: A
    INTEGER(KIND=C_LONG), INTENT(OUT), DIMENSION(SIZE(A)) :: IDX
    INTEGER, DIMENSION(SIZE(A)) :: TEMP_IDX
    ! WARNING: Automatically generated the following copies to handle a
    ! type-mismatch. NumPy uses 64-bit (KIND=8) INTEGERs and REALs.
    ! Consider converting 'QSORTC' to (KIND=8) for better performance.
    TEMP_IDX = IDX
    CALL QSORTC(A, TEMP_IDX)
    IDX = TEMP_IDX
  END SUBROUTINE c_QSORTC
END MODULE FIT_BOX_MOD_WRAPPER
