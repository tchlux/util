MODULE MAX_BOX_MOD_WRAPPER
  USE ISO_C_BINDING, ONLY: C_LONG, C_DOUBLE
  USE REAL_PRECISION
  USE MAX_BOX
  IMPLICIT NONE

CONTAINS


SUBROUTINE c_MAX_BOXES( PTS_0, PTS_1, PTS, BOX_WIDTHS ) BIND(c)
    INTEGER(KIND=C_LONG), INTENT(IN) :: PTS_0
    INTEGER(KIND=C_LONG), INTENT(IN) :: PTS_1
    REAL(KIND=C_DOUBLE), INTENT(IN), DIMENSION(PTS_0,PTS_1) :: PTS
    REAL(KIND=C_DOUBLE), INTENT(OUT), DIMENSION(2*UBOUND(PTS,1),UBOUND&
         &(PTS,2)) :: BOX_WIDTHS
    
    CALL MAX_BOXES(PTS, BOX_WIDTHS)
    
  END SUBROUTINE c_MAX_BOXES


SUBROUTINE c_LINEAR_EVAL( BOXES_0, BOXES_1, BOXES, BOX_WIDTHS, BOX_VAL&
     &UES, PTS_0, PTS_1, PTS, VALUES, ERROR ) BIND(c)
    INTEGER(KIND=C_LONG), INTENT(IN) :: BOXES_0
    INTEGER(KIND=C_LONG), INTENT(IN) :: BOXES_1
    REAL(KIND=C_DOUBLE), INTENT(IN), DIMENSION(BOXES_0,BOXES_1) :: BOX&
         &ES
    REAL(KIND=C_DOUBLE), INTENT(IN), DIMENSION(2*UBOUND(BOXES,1),UBOUN&
         &D(BOXES,2)) :: BOX_WIDTHS
    REAL(KIND=C_DOUBLE), INTENT(IN), DIMENSION(UBOUND(BOXES,2)) :: BOX&
         &_VALUES
    INTEGER(KIND=C_LONG), INTENT(IN) :: PTS_0
    INTEGER(KIND=C_LONG), INTENT(IN) :: PTS_1
    REAL(KIND=C_DOUBLE), INTENT(IN), DIMENSION(PTS_0,PTS_1) :: PTS
    REAL(KIND=C_DOUBLE), INTENT(OUT), DIMENSION(UBOUND(PTS,2)) :: VALU&
         &ES
    INTEGER(KIND=C_LONG), INTENT(OUT) :: ERROR
    
    CALL LINEAR_EVAL(BOXES, BOX_WIDTHS, BOX_VALUES, PTS, VALUES, ERROR&
         &)
    
  END SUBROUTINE c_LINEAR_EVAL


SUBROUTINE c_QSORTC( A_0, A, IDX ) BIND(c)
    INTEGER(KIND=C_LONG), INTENT(IN) :: A_0
    REAL(KIND=C_DOUBLE), INTENT(INOUT), DIMENSION(A_0) :: A
    INTEGER(KIND=C_LONG), INTENT(OUT), DIMENSION(SIZE(A)) :: IDX
    INTEGER, DIMENSION(SIZE(A)) :: TEMP_IDX
    ! WARNING: Automatically generated the following copies to handle a
    ! type-mismatch. NumPy uses 64-bit (KIND=8) INTEGERs and REALs.
    ! Consider converting 'QSORTC' to (KIND=8) for better performance.
    TEMP_IDX = IDX
    CALL QSORTC(A, TEMP_IDX)
    IDX = TEMP_IDX
  END SUBROUTINE c_QSORTC
END MODULE MAX_BOX_MOD_WRAPPER
