BASE_SVG = '''
<svg version="1.1" id="{id}"
     xmlns="http://www.w3.org/2000/svg"
     width="{width}" height="{height}">

{body}

</svg>
'''

DEFAULT_CANVAS = '''
<rect id="canvas"
      x="2.5%" y="2.5%" width="95%" height="95%"
      fill="rgba(0,0,0,.05)"/>

<text id="title" x="50%" y="9%" text-anchor="middle" fill="black"
      font-size="4vh" font-family="Monaco">{title}</text>

<rect id="plot" x="5%" y="12%" width="75%" height="83%" fill="#FFF"/>

'''


def initialize_2D_plot(title, x_axis_name, y_axis_name, x_range, y_range):
    canvas = DEFAULT_CANVAS.format(title=title, x_axis=x_axis_name, 
                                   y_axis=y_axis_name)
    
    # Set the x-axis location.
    if   (min(x_range) < 0) and (max(x_range) < 0):
        x_axis_location = "100%"
    elif (min(x_range) < 0) and (max(x_range) > 0):
        x_axis_location = "%0.2f%%"%(
            100 * abs(min(x_range)) / (max(x_range) - min(x_range)))
    else:
        x_axis_location = "0%"

    # Set the y-axis location.
    if   (min(y_range) < 0) and (max(y_range) < 0):
        y_axis_location = "100%"
    elif (min(y_range) < 0) and (max(y_range) > 0):
        y_axis_location = "%0.2f%%"%(
            100 * abs(min(y_range)) / (max(y_range) - min(y_range)))
    else:
        y_axis_location = "0%"

    # Create the x and y axis in the SVG
    canvas += AXIS_LINE.format(x1=x_axis_location, y1="12%",
                               x2=x_axis_location, y2="95%",
                               color="#000")
    canvas += AXIS_LINE.format(x1="5%", y1=y_axis_location,
                               x2="80%", y2=y_axis_location,
                               color="#000")
    # Create the legend in the SVG
    svg = BASE_SVG.format(id="123", width=DEFAULT_WIDTH,
                          height=DEFAULT_HEIGHT, body=canvas)
    return svg


# Each time data comes in and is given, we could immediately render
# that into the lines of the SVG file in order that will display that
# data if it is 2D. We cannot do this for 3D because we need relative
# positions of objects in the scene.



